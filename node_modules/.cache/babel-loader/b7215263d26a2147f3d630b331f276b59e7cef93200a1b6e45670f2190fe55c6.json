{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\Interview\\\\SprintPro Assignment\\\\birthdays-calendar\\\\src\\\\components\\\\BirthdayList.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import useFetch from '../hooks/useFetch';\n// import { BirthdayResponse } from '../types';\n// import Button from '@mui/material/Button';\n// import FavouriteList from './FavouriteList';\n\n// interface Props {\n//   date: Date;\n// }\n\n// const formatDate = (date: Date): string => {\n//   const month = date.getMonth() + 1;\n//   const day = date.getDate();\n//   return `${month}/${day}`;\n// };\n\n// const BirthdayList: React.FC<Props> = ({ date }) => {\n//   const [favourites, setFavourites] = useState<string[]>([]);\n//   const formattedDate = formatDate(date);\n//   const { data, loading, error } = useFetch(\n//     `https://api.wikimedia.org/feed/v1/wikipedia/en/onthisday/births/${formattedDate}`\n//   );\n\n//   const addFavourite = (title: string) => {\n//     setFavourites([...favourites, title]);\n//   };\n\n//   if (loading) return <div>Loading...</div>;\n//   if (error) return <div>Error: {error}</div>;\n\n//   const birthdays = (data as BirthdayResponse).births;\n\n//   return (\n//     <div>\n//       <h3>Birthdays on {formattedDate}</h3>\n//       <ul>\n//         {birthdays.map((birthday, index) => (\n//           <li key={index}>\n//             {birthday.text}\n//             <Button onClick={() => addFavourite(birthday.pages[0].title)}>Add to Favourites</Button>\n//           </li>\n//         ))}\n//       </ul>\n//       <FavouriteList favourites={favourites} />\n//     </div>\n//   );\n// };\n\n// export default BirthdayList;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // Import axios for API requests\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BirthdayList = ({\n  date\n}) => {\n  _s();\n  const [birthdays, setBirthdays] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      setError(null);\n      if (!date) return; // Handle case where no date is selected\n\n      try {\n        const response = await axios.get(`https://your-api-endpoint/${date.toISOString()}/births` // Replace with actual endpoint\n        );\n        setBirthdays(response.data.births);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [date]); // Refetch on date change\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 21\n  }, this);\n  if (!birthdays) {\n    // Handle case where API doesn't have data for the date\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No birthdays found for this date.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"list-group\",\n    children: birthdays.map((birthday, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"list-group-item\",\n      children: [birthday.text, \" \"]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(BirthdayList, \"j059J8vJVDz1Y7jflqhOqs0EClg=\");\n_c = BirthdayList;\nexport default BirthdayList;\nvar _c;\n$RefreshReg$(_c, \"BirthdayList\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","BirthdayList","date","_s","birthdays","setBirthdays","loading","setLoading","error","setError","fetchData","response","get","toISOString","data","births","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","birthday","index","text","_c","$RefreshReg$"],"sources":["D:/Coding/Interview/SprintPro Assignment/birthdays-calendar/src/components/BirthdayList.tsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import useFetch from '../hooks/useFetch';\r\n// import { BirthdayResponse } from '../types';\r\n// import Button from '@mui/material/Button';\r\n// import FavouriteList from './FavouriteList';\r\n\r\n// interface Props {\r\n//   date: Date;\r\n// }\r\n\r\n// const formatDate = (date: Date): string => {\r\n//   const month = date.getMonth() + 1;\r\n//   const day = date.getDate();\r\n//   return `${month}/${day}`;\r\n// };\r\n\r\n// const BirthdayList: React.FC<Props> = ({ date }) => {\r\n//   const [favourites, setFavourites] = useState<string[]>([]);\r\n//   const formattedDate = formatDate(date);\r\n//   const { data, loading, error } = useFetch(\r\n//     `https://api.wikimedia.org/feed/v1/wikipedia/en/onthisday/births/${formattedDate}`\r\n//   );\r\n\r\n//   const addFavourite = (title: string) => {\r\n//     setFavourites([...favourites, title]);\r\n//   };\r\n\r\n//   if (loading) return <div>Loading...</div>;\r\n//   if (error) return <div>Error: {error}</div>;\r\n\r\n//   const birthdays = (data as BirthdayResponse).births;\r\n\r\n//   return (\r\n//     <div>\r\n//       <h3>Birthdays on {formattedDate}</h3>\r\n//       <ul>\r\n//         {birthdays.map((birthday, index) => (\r\n//           <li key={index}>\r\n//             {birthday.text}\r\n//             <Button onClick={() => addFavourite(birthday.pages[0].title)}>Add to Favourites</Button>\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//       <FavouriteList favourites={favourites} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default BirthdayList;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios'; // Import axios for API requests\r\n\r\ninterface BirthdayResponse {\r\n  // Define the structure of your API response (replace with actual properties)\r\n  births: { text: string; /* Other properties as needed */ }[];\r\n}\r\n\r\ninterface Props {\r\n  date: Date | null;\r\n}\r\n\r\nconst BirthdayList: React.FC<Props> = ({ date }) => {\r\n  const [birthdays, setBirthdays] = useState<BirthdayResponse['births'] | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      if (!date) return; // Handle case where no date is selected\r\n\r\n      try {\r\n        const response = await axios.get(\r\n          `https://your-api-endpoint/${date.toISOString()}/births` // Replace with actual endpoint\r\n        );\r\n        setBirthdays(response.data.births);\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [date]); // Refetch on date change\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n\r\n  if (!birthdays) {\r\n    // Handle case where API doesn't have data for the date\r\n    return <div>No birthdays found for this date.</div>;\r\n  }\r\n\r\n  return (\r\n    <ul className=\"list-group\">\r\n      {birthdays.map((birthday, index) => (\r\n        <li key={index} className=\"list-group-item\">\r\n          {birthday.text} {/* Assuming 'text' property holds the birthday information */}\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default BirthdayList;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAW3B,MAAMC,YAA6B,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAoC,IAAI,CAAC;EACnF,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMa,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5BH,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI,CAACP,IAAI,EAAE,OAAO,CAAC;;MAEnB,IAAI;QACF,MAAMS,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAC9B,6BAA6BV,IAAI,CAACW,WAAW,CAAC,CAAC,SAAS,CAAC;QAC3D,CAAC;QACDR,YAAY,CAACM,QAAQ,CAACG,IAAI,CAACC,MAAM,CAAC;MACpC,CAAC,CAAC,OAAOP,KAAK,EAAE;QACdC,QAAQ,CAACD,KAAK,CAACQ,OAAO,CAAC;MACzB,CAAC,SAAS;QACRT,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACR,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEZ,IAAII,OAAO,EAAE,oBAAON,OAAA;IAAAiB,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACzC,IAAIb,KAAK,EAAE,oBAAOR,OAAA;IAAAiB,QAAA,GAAK,SAAO,EAACT,KAAK;EAAA;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;EAE3C,IAAI,CAACjB,SAAS,EAAE;IACd;IACA,oBAAOJ,OAAA;MAAAiB,QAAA,EAAK;IAAiC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACrD;EAEA,oBACErB,OAAA;IAAIsB,SAAS,EAAC,YAAY;IAAAL,QAAA,EACvBb,SAAS,CAACmB,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,kBAC7BzB,OAAA;MAAgBsB,SAAS,EAAC,iBAAiB;MAAAL,QAAA,GACxCO,QAAQ,CAACE,IAAI,EAAC,GAAC;IAAA,GADTD,KAAK;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAET,CAAC;AAAClB,EAAA,CA5CIF,YAA6B;AAAA0B,EAAA,GAA7B1B,YAA6B;AA8CnC,eAAeA,YAAY;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}